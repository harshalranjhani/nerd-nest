create type "public"."difficulty_enum_types" as enum ("easy", "medium", "hard");

create table "public"."notes" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text not null,
    "question_id" uuid,
    "links" text[],
    "user" text not null
);


alter table "public"."notes" enable row level security;

create table "public"."questions" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "topic" text,
    "question_link" text,
    "starred" boolean not null default false,
    "user" text not null,
    "difficulty" difficulty_enum_types not null,
    "solution_link" text,
    "is_solved" boolean not null default false,
    "note_id" uuid
);


alter table "public"."questions" enable row level security;

create table "public"."users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp without time zone,
    "user_id" text not null,
    "name" text,
    "email" text,
    "role" character varying,
    "leetcode_username" text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

CREATE UNIQUE INDEX questions_id_key ON public.questions USING btree (id);

CREATE UNIQUE INDEX questions_pkey ON public.questions USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id, user_id);

CREATE UNIQUE INDEX users_user_id_key ON public.users USING btree (user_id);

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."questions" add constraint "questions_pkey" PRIMARY KEY using index "questions_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."notes" add constraint "notes_question_id_fkey" FOREIGN KEY (question_id) REFERENCES questions(id) not valid;

alter table "public"."notes" validate constraint "notes_question_id_fkey";

alter table "public"."notes" add constraint "notes_user_fkey" FOREIGN KEY ("user") REFERENCES users(user_id) not valid;

alter table "public"."notes" validate constraint "notes_user_fkey";

alter table "public"."questions" add constraint "public_questions_user_fkey" FOREIGN KEY ("user") REFERENCES users(user_id) not valid;

alter table "public"."questions" validate constraint "public_questions_user_fkey";

alter table "public"."questions" add constraint "questions_id_key" UNIQUE using index "questions_id_key";

alter table "public"."questions" add constraint "questions_note_id_fkey" FOREIGN KEY (note_id) REFERENCES notes(id) not valid;

alter table "public"."questions" validate constraint "questions_note_id_fkey";

alter table "public"."users" add constraint "users_user_id_key" UNIQUE using index "users_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  INSERT INTO public.users (user_id, email, name, created_at, updated_at)
  VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data ->> "full_name", NOW(), NOW());
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

grant delete on table "public"."questions" to "anon";

grant insert on table "public"."questions" to "anon";

grant references on table "public"."questions" to "anon";

grant select on table "public"."questions" to "anon";

grant trigger on table "public"."questions" to "anon";

grant truncate on table "public"."questions" to "anon";

grant update on table "public"."questions" to "anon";

grant delete on table "public"."questions" to "authenticated";

grant insert on table "public"."questions" to "authenticated";

grant references on table "public"."questions" to "authenticated";

grant select on table "public"."questions" to "authenticated";

grant trigger on table "public"."questions" to "authenticated";

grant truncate on table "public"."questions" to "authenticated";

grant update on table "public"."questions" to "authenticated";

grant delete on table "public"."questions" to "service_role";

grant insert on table "public"."questions" to "service_role";

grant references on table "public"."questions" to "service_role";

grant select on table "public"."questions" to "service_role";

grant trigger on table "public"."questions" to "service_role";

grant truncate on table "public"."questions" to "service_role";

grant update on table "public"."questions" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "add new questions allow all"
on "public"."questions"
as permissive
for all
to public
using (true);


create policy "allow all"
on "public"."users"
as permissive
for all
to public
using (true);



